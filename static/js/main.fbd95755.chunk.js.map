{"version":3,"sources":["Data/languages.ts","Components/Dict.tsx","App.tsx","index.tsx"],"names":["languages","label","value","useStyles","makeStyles","theme","root","margin","spacing","width","Dict","classes","useState","meanings","setMeanings","word","setWord","lang","setLang","fetchData","a","axios","get","data","console","error","useEffect","className","Typography","variant","style","TextField","onChange","e","target","id","placeholder","select","map","language","index","MenuItem","meaning","toUpperCase","wordMeanings","List","textAlign","partOfSpeech","definitions","wordDef","ListItem","ListItemText","definition","Divider","darkTheme","createTheme","palette","type","App","ThemeProvider","Container","maxWidth","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2QAAaA,EAAY,CACvB,CAAEC,MAAO,UAAWC,MAAO,MAC3B,CAAED,MAAO,UAAWC,MAAO,MAC3B,CAAED,MAAO,SAAUC,MAAO,MAC1B,CAAED,MAAO,WAAYC,MAAO,MAC5B,CAAED,MAAO,UAAWC,MAAO,MAC3B,CAAED,MAAO,SAAUC,MAAO,MAC1B,CAAED,MAAO,UAAWC,MAAO,MAC3B,CAAED,MAAO,SAAUC,MAAO,MAC1B,CAAED,MAAO,uBAAwBC,MAAO,SACxC,CAAED,MAAO,SAAUC,MAAO,MAC1B,CAAED,MAAO,UAAWC,MAAO,MAC3B,CAAED,MAAO,QAASC,MAAO,O,6ECFrBC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJ,uBAAwB,CACtBC,OAAQF,EAAMG,QAAQ,GACtBC,MAAO,aAKAC,EAAiB,WAC5B,IAAMC,EAAUR,IAEhB,EAAgCS,mBAAuC,IAAvE,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAwBF,mBAAwB,IAAhD,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAwBJ,mBAAwB,MAAhD,mBAAOK,EAAP,KAAaC,EAAb,KAEMC,EAAmB,uCAAG,4BAAAC,EAAA,yDACb,KAATL,EADsB,0EAKHM,IAAMC,IAAN,uDAC+BL,EAD/B,YACuCF,IANpC,OAKhBQ,EALgB,OAQtBT,EAAYS,EAAKA,MARK,kDAUtBC,QAAQC,MAAR,MAVsB,0DAAH,qDAmBzB,OAJAC,qBAAU,WACRP,MACC,CAACJ,EAAME,IAGR,sBAAKU,UAAWhB,EAAQL,KAAxB,UACE,cAACsB,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAO,CAAEvB,OAAQ,IAA1C,uBAGA,cAACwB,EAAA,EAAD,CACEC,SAAU,SAACC,GAAD,OAAOjB,EAAQiB,EAAEC,OAAOhC,QAClCiC,GAAG,OACHC,YAAY,gBACZP,QAAQ,aAEV,cAACE,EAAA,EAAD,CACEI,GAAG,OACHE,QAAM,EACNpC,MAAM,WACN4B,QAAQ,WACRG,SAAU,SAACC,GAAD,OAAOf,EAAQe,EAAEC,OAAOhC,QALpC,SAOGF,EAAUsC,KAAI,SAACC,EAAUC,GAAX,OACb,cAACC,EAAA,EAAD,CAAsBvC,MAAOqC,EAASrC,MAAtC,SACGqC,EAAStC,OADGuC,QAKlB3B,EAASyB,KAAI,SAACI,GAAD,OACZ,qCACE,cAACd,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAO,CAAEvB,OAAQ,IAA1C,SACGmC,EAAQ3B,KAAK4B,gBAEfD,EAAQ7B,SAASyB,KAAI,SAACM,EAA4BJ,GAA7B,OACpB,eAACK,EAAA,EAAD,CAAMf,MAAO,CAAEgB,UAAW,UAA1B,UACE,cAAClB,EAAA,EAAD,CAAYC,QAAQ,KAApB,SACGe,EAAaG,aAAaJ,gBAE5BC,EAAaI,YAAYV,KAAI,SAACW,EAAmBT,GAApB,OAC5B,qCACE,cAACU,EAAA,EAAD,CAAUpB,MAAO,CAAEgB,UAAW,UAA9B,SACE,cAACK,EAAA,EAAD,UAAeF,EAAQG,cADsBZ,GAG/C,cAACa,EAAA,EAAD,YATqCb,gB,iBCjEjDc,EAAYC,YAAY,CAC5BC,QAAS,CACPC,KAAM,UAgBKC,MAZf,WACE,OACE,8BACE,cAACC,EAAA,EAAD,CAAetD,MAAOiD,EAAtB,SACE,cAACM,EAAA,EAAD,CAAWC,SAAS,KAAK/B,MAAO,CAAEgB,UAAW,UAA7C,SACE,cAAC,EAAD,WChBVgB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.fbd95755.chunk.js","sourcesContent":["export const languages = [\r\n  { label: \"English\", value: \"en\" },\r\n  { label: \"Spanish\", value: \"es\" },\r\n  { label: \"French\", value: \"fr\" },\r\n  { label: \"Japanese\", value: \"ja\" },\r\n  { label: \"Russian\", value: \"ru\" },\r\n  { label: \"German\", value: \"de\" },\r\n  { label: \"Italian\", value: \"it\" },\r\n  { label: \"Korean\", value: \"ko\" },\r\n  { label: \"Brazilian Portuguese\", value: \"pt-BR\" },\r\n  { label: \"Arabic\", value: \"ar\" },\r\n  { label: \"Turkish\", value: \"tr\" },\r\n  { label: \"Hindi\", value: \"hi\" },\r\n];\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport axios, { AxiosResponse } from \"axios\";\r\nimport { languages } from \"../Data/languages\";\r\nimport { makeStyles, createTheme } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport { List, ListItem, ListItemText } from \"@material-ui/core\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& .MuiTextField-root\": {\r\n      margin: theme.spacing(1),\r\n      width: \"25ch\",\r\n    },\r\n  },\r\n}));\r\n\r\nexport const Dict: React.FC = () => {\r\n  const classes = useStyles();\r\n\r\n  const [meanings, setMeanings] = useState<AxiosResponse | any | Object>([]);\r\n  const [word, setWord] = useState<String | null>(\"\");\r\n  const [lang, setLang] = useState<String | null>(\"en\");\r\n\r\n  const fetchData: Function = async () => {\r\n    if (word === \"\") {\r\n      return;\r\n    } else {\r\n      try {\r\n        const data = await axios.get(\r\n          `https://api.dictionaryapi.dev/api/v2/entries/${lang}/${word}`\r\n        );\r\n        setMeanings(data.data);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [word, lang]);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Typography variant=\"h2\" style={{ margin: 12 }}>\r\n        Word Hunt\r\n      </Typography>\r\n      <TextField\r\n        onChange={(e) => setWord(e.target.value)}\r\n        id=\"word\"\r\n        placeholder=\"Type The Word\"\r\n        variant=\"outlined\"\r\n      />\r\n      <TextField\r\n        id=\"lang\"\r\n        select\r\n        label=\"Language\"\r\n        variant=\"outlined\"\r\n        onChange={(e) => setLang(e.target.value)}\r\n      >\r\n        {languages.map((language, index) => (\r\n          <MenuItem key={index} value={language.value}>\r\n            {language.label}\r\n          </MenuItem>\r\n        ))}\r\n      </TextField>\r\n      {meanings.map((meaning: any | string) => (\r\n        <>\r\n          <Typography variant=\"h3\" style={{ margin: 16 }}>\r\n            {meaning.word.toUpperCase()}\r\n          </Typography>\r\n          {meaning.meanings.map((wordMeanings: any | Object, index: any) => (\r\n            <List style={{ textAlign: \"center\" }} key={index}>\r\n              <Typography variant=\"h4\">\r\n                {wordMeanings.partOfSpeech.toUpperCase()}\r\n              </Typography>\r\n              {wordMeanings.definitions.map((wordDef: any | [], index: any) => (\r\n                <>\r\n                  <ListItem style={{ textAlign: \"center\" }} key={index}>\r\n                    <ListItemText>{wordDef.definition}</ListItemText>\r\n                  </ListItem>\r\n                  <Divider />\r\n                </>\r\n              ))}\r\n            </List>\r\n          ))}\r\n        </>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Container from \"@material-ui/core/Container\";\nimport { Dict } from \"./Components/Dict\";\nimport {\n  createTheme,\n  ThemeProvider,\n  ThemeProviderProps,\n} from \"@material-ui/core/styles\";\n\nconst darkTheme = createTheme({\n  palette: {\n    type: \"dark\",\n  },\n});\n\nfunction App() {\n  return (\n    <div>\n      <ThemeProvider theme={darkTheme}>\n        <Container maxWidth=\"md\" style={{ textAlign: \"center\" }}>\n          <Dict />\n        </Container>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}